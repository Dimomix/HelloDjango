[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "django.shortcuts",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CertificationAnswer",
        "importPath": "Certification.models",
        "description": "Certification.models",
        "isExtraImport": true,
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "Certification.models",
        "description": "Certification.models",
        "isExtraImport": true,
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "SetPasswordForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Certification.migrations.0001_initial",
        "description": "Certification.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "Certification.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CertificationConfig",
        "kind": 6,
        "importPath": "Certification.apps",
        "description": "Certification.apps",
        "peekOfCode": "class CertificationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Certification'",
        "detail": "Certification.apps",
        "documentation": {}
    },
    {
        "label": "Competency",
        "kind": 6,
        "importPath": "Certification.models",
        "description": "Certification.models",
        "peekOfCode": "class Competency(models.Model):\n    # Компетенции, например: Педагогические, Психологические и т.д.\n    name = models.CharField(max_length=100)\n    # type = models.CharField(max_length=100)\n    description = models.TextField(blank=True,null=True)\n    def __str__(self):\n        return self.name\nclass CertificationLevel(models.Model):\n    # Уровни сертификации, например: 5, 6, 7, 8\n    level = models.IntegerField()",
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "CertificationLevel",
        "kind": 6,
        "importPath": "Certification.models",
        "description": "Certification.models",
        "peekOfCode": "class CertificationLevel(models.Model):\n    # Уровни сертификации, например: 5, 6, 7, 8\n    level = models.IntegerField()\n    requirements = models.TextField(blank=True,null=True)\n    def __str__(self):\n        return str(self.level)\nclass Category(models.Model):\n    # Бакалавр Магистр и т.д.\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True,null=True)",
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "Certification.models",
        "description": "Certification.models",
        "peekOfCode": "class Category(models.Model):\n    # Бакалавр Магистр и т.д.\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True,null=True)\n    level = models.ForeignKey(CertificationLevel, related_name='certification_sessions', on_delete=models.CASCADE, null = True)\n    def __str__(self):\n        return self.name\nclass Teacher(models.Model):\n    # Преподаватели\n    user = models.OneToOneField(User, related_name='teacher', on_delete=models.CASCADE,null=True)",
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "kind": 6,
        "importPath": "Certification.models",
        "description": "Certification.models",
        "peekOfCode": "class Teacher(models.Model):\n    # Преподаватели\n    user = models.OneToOneField(User, related_name='teacher', on_delete=models.CASCADE,null=True)\n    # subjects = models.ManyToManyField(Subject, related_name='teachers')\n    competencies = models.ManyToManyField(Competency, related_name='teachers', blank=True, null=True)\n    сategory = models.ForeignKey(Category, related_name='teachers', on_delete=models.CASCADE,blank=True, null=True)\n    certification_level = models.ForeignKey(CertificationLevel, related_name='teachers',blank=True,null=True, on_delete=models.CASCADE)\n    def __str__(self):\n        return self.user.username\nclass CertificationTask(models.Model):",
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "CertificationTask",
        "kind": 6,
        "importPath": "Certification.models",
        "description": "Certification.models",
        "peekOfCode": "class CertificationTask(models.Model):\n    # Задачи для сертификации\n    title = models.CharField(max_length=100, null = True, blank=True)\n    content = models.TextField()\n    competency = models.ForeignKey(Competency, related_name='tasks', on_delete=models.CASCADE)\n    сategory = models.ForeignKey(Category, related_name='tasks', on_delete=models.CASCADE,null=True)\n    # su bject = models.ForeignKey(Subject, related_name='certification_sessions', on_delete=models.CASCADE)\n    image=models.ImageField(upload_to='certification_tasks', blank=True,null=True)\n    level = models.ForeignKey(CertificationLevel, related_name='tasks', blank=True,null=True, on_delete=models.CASCADE)\n    def __str__(self):",
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "CertificationAnswer",
        "kind": 6,
        "importPath": "Certification.models",
        "description": "Certification.models",
        "peekOfCode": "class CertificationAnswer(models.Model):\n    task = models.ForeignKey(CertificationTask, related_name='answers', on_delete=models.CASCADE)\n    # result = models.ForeignKey('CertificationResult', related_name='answers', on_delete=models.CASCADE)\n    content = models.TextField(null=True,blank=True)\n    correct = models.BooleanField(null=True,blank=True)\n    ball = models.IntegerField(null=True,blank=True)\n    def __str__(self):\n        return self.task.content\nclass CertificationSession(models.Model):\n    # Сессии сертификации",
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "CertificationSession",
        "kind": 6,
        "importPath": "Certification.models",
        "description": "Certification.models",
        "peekOfCode": "class CertificationSession(models.Model):\n    # Сессии сертификации\n    teacher = models.ForeignKey(Teacher, related_name='certification_sessions', on_delete=models.CASCADE)\n    competency=models.ForeignKey(Competency, related_name='certification_sessions', on_delete=models.CASCADE)\n    category=models.ForeignKey(Category, related_name='certification_sessions', on_delete=models.CASCADE, null =True)\n    date = models.DateField(default=timezone.now)\n    end_time=models.DateTimeField(null=True,blank=True)\n    task=models.ManyToManyField(CertificationTask, related_name='certification_sessions',null=True)\n    answer = models.ManyToManyField(CertificationAnswer, related_name='certification_sessions',null=True)\n    score = models.IntegerField(null=True,blank=True)",
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "CertificationAnswerFile",
        "kind": 6,
        "importPath": "Certification.models",
        "description": "Certification.models",
        "peekOfCode": "class CertificationAnswerFile(models.Model):\n    answer = models.ForeignKey(CertificationAnswer, related_name='files', on_delete=models.CASCADE)\n    file = models.FileField(upload_to='certification_answers')",
        "detail": "Certification.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Certification.urls",
        "description": "Certification.urls",
        "peekOfCode": "urlpatterns = [\n    path('Answerpage/',CertificationAnswerView.as_view(),name = 'Answerpage'),\n    path('answer/<int:pk>/', answer_detail, name='answer_detail'),\n    path('passed/<int:pk>/', passed_session, name='passed_session'),\n    path('Login/',LoginView.as_view(),name = 'Login'),\n    path('Register/',RegisterView.as_view(),name = 'Register'),\n    path('Logout/',LogoutView.as_view(),name = 'Logout'),\n    path('Profile/',ProfileView.as_view(),name = 'Profile'),\n    path('Certification/',CertificationView.as_view(),name = 'Certification'),\n    path('CertificationAnswer/',CertificationAnswerView.as_view(),name = 'CertificationAnswer'),",
        "detail": "Certification.urls",
        "documentation": {}
    },
    {
        "label": "CertificationAnswerView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class CertificationAnswerView(TemplateView):\n    # template_name = \"form-answer.html\"\n    template_name =\"form-fileuploads.html\"\n    def get(self,request):\n        user=request.user\n        teacher = Teacher.objects.filter(user=user).first()\n        session=CertificationSession.objects.filter(teacher=teacher,passed=False).first()\n        answer=session.answer.first()\n        context={\n            'answer':answer,",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class LoginView(TemplateView):\n    template_name = \"pages-login.html\"\n    def get(self,request):\n        return render(request,self.template_name)\n    def post(self,request):\n        email = request.POST['email']\n        password = request.POST['password']\n        user = authenticate(request,username = email,password = password)\n        if user is None:\n            try:",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class LogoutView(TemplateView):\n    def get(self,request):\n        logout(request)\n        return redirect('Login')\nclass RegisterView(TemplateView):\n    template_name = \"pages-register.html\"\n    def get(self,request):\n        form = UserCreationForm()\n        return render(request,self.template_name\n                    #   ,",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class RegisterView(TemplateView):\n    template_name = \"pages-register.html\"\n    def get(self,request):\n        form = UserCreationForm()\n        return render(request,self.template_name\n                    #   ,\n                    #   {'form':form}\n                      )\n    def post(self,request):\n        # form = UserCreationForm(request.POST)",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "ProfileView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class ProfileView(TemplateView):\n    template_name = \"pages-profile.html\"\nclass CertificationView(TemplateView):\n    template_name = \"Certification.html\"\n# class CertificationAnswerView(TemplateView):\n#     template_name = \"CertificationAnswer.html\"\nclass CertificationLevelView(TemplateView):\n    template_name = \"form-fileuploads.html\"\nclass CertificationResultView(TemplateView):\n    template_name = \"CertificationResult.html\"",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "CertificationView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class CertificationView(TemplateView):\n    template_name = \"Certification.html\"\n# class CertificationAnswerView(TemplateView):\n#     template_name = \"CertificationAnswer.html\"\nclass CertificationLevelView(TemplateView):\n    template_name = \"form-fileuploads.html\"\nclass CertificationResultView(TemplateView):\n    template_name = \"CertificationResult.html\"\ndef get_random_tasks(level, count=10):\n    # Получаем задачи с определенным уровнем",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "CertificationLevelView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class CertificationLevelView(TemplateView):\n    template_name = \"form-fileuploads.html\"\nclass CertificationResultView(TemplateView):\n    template_name = \"CertificationResult.html\"\ndef get_random_tasks(level, count=10):\n    # Получаем задачи с определенным уровнем\n    tasks_with_level = CertificationTask.objects.filter(level=level)\n    # Получаем случайные задачи из этого набора\n    random_tasks = random.sample(list(tasks_with_level), min(count, len(tasks_with_level)))\n    return random_tasks",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "CertificationResultView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class CertificationResultView(TemplateView):\n    template_name = \"CertificationResult.html\"\ndef get_random_tasks(level, count=10):\n    # Получаем задачи с определенным уровнем\n    tasks_with_level = CertificationTask.objects.filter(level=level)\n    # Получаем случайные задачи из этого набора\n    random_tasks = random.sample(list(tasks_with_level), min(count, len(tasks_with_level)))\n    return random_tasks\nclass CertificationSessionView(TemplateView):\n    template_name = \"session.html\"",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "CertificationSessionView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class CertificationSessionView(TemplateView):\n    template_name = \"session.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"competency\"] = Competency.objects.all()\n        context[\"category\"] = Category.objects.all()\n        return context\n    def post(self, request, *args, **kwargs):\n        category = request.POST.get('category')\n        competency = request.POST.get('competency')",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "CertificationTaskView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class CertificationTaskView(TemplateView):\n    template_name = \"CertificationTask.html\"\nclass CompetencyView(TemplateView):\n    template_name = \"Competency.html\"    \nclass SubjectView(TemplateView):\n    template_name = \"Subject.html\"\nclass AddQuetions(TemplateView):\n    template_name = 'add_quetions.html'\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "CompetencyView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class CompetencyView(TemplateView):\n    template_name = \"Competency.html\"    \nclass SubjectView(TemplateView):\n    template_name = \"Subject.html\"\nclass AddQuetions(TemplateView):\n    template_name = 'add_quetions.html'\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"competency\"] = Competency.objects.all()\n        context[\"level\"] = CertificationLevel.objects.all()",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "SubjectView",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class SubjectView(TemplateView):\n    template_name = \"Subject.html\"\nclass AddQuetions(TemplateView):\n    template_name = 'add_quetions.html'\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"competency\"] = Competency.objects.all()\n        context[\"level\"] = CertificationLevel.objects.all()\n        context[\"category\"] = Category.objects.all()\n        return context",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "AddQuetions",
        "kind": 6,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "class AddQuetions(TemplateView):\n    template_name = 'add_quetions.html'\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context[\"competency\"] = Competency.objects.all()\n        context[\"level\"] = CertificationLevel.objects.all()\n        context[\"category\"] = Category.objects.all()\n        return context\n    def post(self,request, *args, **kwargs):\n        subject = request.POST.get('subject')",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "answer_detail",
        "kind": 2,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "def answer_detail(request, pk):\n    if request.method == 'POST':\n        answer = CertificationAnswer.objects.get(pk=pk)\n        # answer.content=request.POST['answer']\n        content = request.POST.get('content')\n        files = request.FILES.get('file')\n        answer.content=content\n        answer.save()\n        print(content)\n        print(files)",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "passed_session",
        "kind": 2,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "def passed_session(request, pk):\n    if request.method == 'POST':\n        answer = CertificationAnswer.objects.get(pk=pk)\n        # answer.content=request.POST['answer']\n        content = request.POST.get('content')\n        files = request.FILES.get('file')\n        answer.content=content\n        answer.save()\n        print(content)\n        print(files)",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "get_random_tasks",
        "kind": 2,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "def get_random_tasks(level, count=10):\n    # Получаем задачи с определенным уровнем\n    tasks_with_level = CertificationTask.objects.filter(level=level)\n    # Получаем случайные задачи из этого набора\n    random_tasks = random.sample(list(tasks_with_level), min(count, len(tasks_with_level)))\n    return random_tasks\nclass CertificationSessionView(TemplateView):\n    template_name = \"session.html\"\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "certification_task_list",
        "kind": 2,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "def certification_task_list(request):\n    tasks = CertificationTask.objects.all().values(\n        'id', 'title', 'content', \n        'competency__name', 'сategory__name', 'image', 'level__level'\n    )\n    task_list = list(tasks)  # Преобразование QuerySet в список\n    return JsonResponse(task_list, safe=False)\ndef delete_question(request, question_id):\n    try:\n            question = CertificationTask.objects.get(id=int(question_id))",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "delete_question",
        "kind": 2,
        "importPath": "Certification.views",
        "description": "Certification.views",
        "peekOfCode": "def delete_question(request, question_id):\n    try:\n            question = CertificationTask.objects.get(id=int(question_id))\n            question.delete()\n            return JsonResponse({'status': 'success', 'message': 'Вопрос удален'})\n    except CertificationTask.DoesNotExist:\n            return JsonResponse({'status': 'error', 'message': 'Вопрос не найден'}, status=404)",
        "detail": "Certification.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "HelloDjango.asgi",
        "description": "HelloDjango.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "HelloDjango.asgi",
        "documentation": {}
    },
    {
        "label": "site_user_root_dir",
        "kind": 5,
        "importPath": "HelloDjango.passenger_wsgi",
        "description": "HelloDjango.passenger_wsgi",
        "peekOfCode": "site_user_root_dir = '/home/d/dimicowi/dimicowi.beget.tech/public_html'\nsys.path.insert(0, site_user_root_dir + '/HelloDjango')\nsys.path.insert(1, site_user_root_dir + '/venv/lib/python3.11/site-packages')\nos.environ['DJANGO_SETTINGS_MODULE'] = 'HelloDjango.settings'\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()",
        "detail": "HelloDjango.passenger_wsgi",
        "documentation": {}
    },
    {
        "label": "os.environ['DJANGO_SETTINGS_MODULE']",
        "kind": 5,
        "importPath": "HelloDjango.passenger_wsgi",
        "description": "HelloDjango.passenger_wsgi",
        "peekOfCode": "os.environ['DJANGO_SETTINGS_MODULE'] = 'HelloDjango.settings'\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()",
        "detail": "HelloDjango.passenger_wsgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "HelloDjango.passenger_wsgi",
        "description": "HelloDjango.passenger_wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "HelloDjango.passenger_wsgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-3(dg$2z2)@a3-8tx9#%#i#93j+*@(nr)-p(q3%$*9tp8gk3m!('\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-3(dg$2z2)@a3-8tx9#%#i#93j+*@(nr)-p(q3%$*9tp8gk3m!('\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Certification'",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Certification'\n]\nMIDDLEWARE = [",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'HelloDjango.urls'",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "ROOT_URLCONF = 'HelloDjango.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "WSGI_APPLICATION = 'HelloDjango.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = '/home/d/dimicowi/dimicowi.beget.tech/public_html/static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = '/home/d/dimicowi/dimicowi.beget.tech/public_html/static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = '/home/d/dimicowi/dimicowi.beget.tech/public_html/static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = '/home/d/dimicowi/dimicowi.beget.tech/public_html/static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = '/home/d/dimicowi/dimicowi.beget.tech/public_html/static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "STATIC_ROOT = '/home/d/dimicowi/dimicowi.beget.tech/public_html/static'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "HelloDjango.settings",
        "description": "HelloDjango.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "HelloDjango.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "HelloDjango.urls",
        "description": "HelloDjango.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('',include('Certification.urls')),\n    ]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "HelloDjango.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "HelloDjango.wsgi",
        "description": "HelloDjango.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "HelloDjango.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'HelloDjango.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]